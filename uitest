-- // MyUILib - Fully Functional UI Library

local MyUILib = {}

-- Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Create screen GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "MyUILibGUI"
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true
screenGui.Parent = PlayerGui

-- Dragging function
local function MakeDraggable(frame, dragBar)
    local dragging, offset
    dragBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            offset = Vector2.new(input.Position.X - frame.Position.X.Offset, input.Position.Y - frame.Position.Y.Offset)
        end
    end)
    dragBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            frame.Position = UDim2.new(0, input.Position.X - offset.X, 0, input.Position.Y - offset.Y)
        end
    end)
end

-- Create Window
function MyUILib:CreateWindow(title, size)
    local frame = Instance.new("Frame")
    frame.Name = title or "Window"
    frame.Size = UDim2.new(0, size.X or 400, 0, size.Y or 300)
    frame.Position = UDim2.new(0.5, -(size.X or 400)/2, 0.5, -(size.Y or 300)/2)
    frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    frame.BorderSizePixel = 0
    frame.AnchorPoint = Vector2.new(0.5, 0.5)
    frame.Parent = screenGui

    local top = Instance.new("Frame")
    top.Size = UDim2.new(1, 0, 0, 30)
    top.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    top.BorderSizePixel = 0
    top.Parent = frame

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, 0, 1, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title or "MyUILib"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.TextSize = 20
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Position = UDim2.new(0, 5, 0, 0)
    titleLabel.Parent = top

    MakeDraggable(frame, top)

    local tabHolder = Instance.new("Frame")
    tabHolder.Size = UDim2.new(0, 100, 1, -30)
    tabHolder.Position = UDim2.new(0, 0, 0, 30)
    tabHolder.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    tabHolder.BorderSizePixel = 0
    tabHolder.Parent = frame

    local contentHolder = Instance.new("Frame")
    contentHolder.Size = UDim2.new(1, -100, 1, -30)
    contentHolder.Position = UDim2.new(0, 100, 0, 30)
    contentHolder.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    contentHolder.BorderSizePixel = 0
    contentHolder.ClipsDescendants = true
    contentHolder.Parent = frame

    local tabFrames = {}

    local function SwitchTab(name)
        for tabName, tabFrame in pairs(tabFrames) do
            tabFrame.Visible = (tabName == name)
        end
    end

    function MyUILib:CreateTab(name)
        local tabButton = Instance.new("TextButton")
        tabButton.Size = UDim2.new(1, 0, 0, 30)
        tabButton.Position = UDim2.new(0, 0, 0, (#tabHolder:GetChildren()) * 30)
        tabButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
        tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        tabButton.Text = name
        tabButton.Font = Enum.Font.SourceSansBold
        tabButton.TextSize = 16
        tabButton.Parent = tabHolder

        local tabFrame = Instance.new("Frame")
        tabFrame.Name = name
        tabFrame.Size = UDim2.new(1, 0, 1, 0)
        tabFrame.BackgroundTransparency = 1
        tabFrame.Visible = false
        tabFrame.Parent = contentHolder

        tabFrames[name] = tabFrame

        tabButton.MouseButton1Click:Connect(function()
            SwitchTab(name)
        end)

        if #tabHolder:GetChildren() == 1 then
            SwitchTab(name)
        end

        return tabFrame
    end

    return setmetatable({
        Main = frame
    }, { __index = MyUILib })
end

-- Toggle
function MyUILib:AddToggle(parent, text, default, callback)
    local count = #parent:GetChildren()

    local label = tostring(text or "Toggle")

    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 200, 0, 30)
    button.Position = UDim2.new(0, 10, 0, 10 + (count * 35))
    button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Font = Enum.Font.SourceSans
    button.TextSize = 18
    button.Text = label .. " [" .. (default and "ON" or "OFF") .. "]"
    button.Parent = parent

    local state = default

    button.MouseButton1Click:Connect(function()
        state = not state
        button.Text = label .. " [" .. (state and "ON" or "OFF") .. "]"
        if callback then callback(state) end
    end)
end

-- Unload
function MyUILib:AddUnloadButton(parent)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 100, 0, 30)
    button.Position = UDim2.new(1, -110, 0, 0)
    button.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Text = "Unload UI"
    button.Font = Enum.Font.SourceSansBold
    button.TextSize = 16
    button.Parent = parent

    button.MouseButton1Click:Connect(function()
        MyUILib:Unload()
    end)
end

-- Destroy UI
function MyUILib:Unload()
    if screenGui then
        screenGui:Destroy()
    end
end

return MyUILib
