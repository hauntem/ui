-- // MyUILib - UI Library w/ Tabs, Dragging, Unload

local MyUILib = {}

-- Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Main container
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "MyUILibGUI"
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true
screenGui.Parent = PlayerGui

-- Drag utility
local function MakeDraggable(frame, dragHandle)
    local dragging, offset
    dragHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            offset = Vector2.new(input.Position.X - frame.Position.X.Offset, input.Position.Y - frame.Position.Y.Offset)
        end
    end)
    dragHandle.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            frame.Position = UDim2.new(0, input.Position.X - offset.X, 0, input.Position.Y - offset.Y)
        end
    end)
end

-- Main CreateWindow
function MyUILib:CreateWindow(name, size)
    local frame = Instance.new("Frame")
    frame.Name = name or "Window"
    frame.Size = UDim2.new(0, size.X or 400, 0, size.Y or 300)
    frame.Position = UDim2.new(0.5, -((size.X or 400)/2), 0.5, -((size.Y or 300)/2))
    frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    frame.BorderSizePixel = 0
    frame.AnchorPoint = Vector2.new(0.5, 0.5)
    frame.Parent = screenGui

    local top = Instance.new("Frame")
    top.Size = UDim2.new(1, 0, 0, 30)
    top.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    top.BorderSizePixel = 0
    top.Parent = frame

    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 1, 0)
    title.BackgroundTransparency = 1
    title.Text = name or "MyUILib"
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.Font = Enum.Font.SourceSansBold
    title.TextSize = 20
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Padding = 5
    title.Parent = top

    MakeDraggable(frame, top)

    local tabHolder = Instance.new("Frame")
    tabHolder.Size = UDim2.new(0, 100, 1, -30)
    tabHolder.Position = UDim2.new(0, 0, 0, 30)
    tabHolder.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    tabHolder.BorderSizePixel = 0
    tabHolder.Parent = frame

    local contentHolder = Instance.new("Frame")
    contentHolder.Size = UDim2.new(1, -100, 1, -30)
    contentHolder.Position = UDim2.new(0, 100, 0, 30)
    contentHolder.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    contentHolder.BorderSizePixel = 0
    contentHolder.ClipsDescendants = true
    contentHolder.Parent = frame

    local tabFrames = {}

    local function SwitchTab(name)
        for n, frame in pairs(tabFrames) do
            frame.Visible = n == name
        end
    end

    local function CreateTab(name)
        local tabButton = Instance.new("TextButton")
        tabButton.Size = UDim2.new(1, 0, 0, 30)
        tabButton.Position = UDim2.new(0, 0, 0, #tabHolder:GetChildren() * 30)
        tabButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
        tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        tabButton.Text = name
        tabButton.Font = Enum.Font.SourceSansBold
        tabButton.TextSize = 16
        tabButton.Parent = tabHolder

        local tabFrame = Instance.new("Frame")
        tabFrame.Name = name
        tabFrame.Size = UDim2.new(1, 0, 1, 0)
        tabFrame.BackgroundTransparency = 1
        tabFrame.Visible = false
        tabFrame.Parent = contentHolder

        tabFrames[name] = tabFrame

        tabButton.MouseButton1Click:Connect(function()
            SwitchTab(name)
        end)

        return tabFrame
    end

    return {
        Main = frame,
        CreateTab = CreateTab
    }
end

-- Add toggle to any frame
function MyUILib:AddToggle(parent, text, default, callback)
    local count = 0
    for _, v in ipairs(parent:GetChildren()) do
        if v:IsA("TextButton") then count += 1 end
    end

    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 200, 0, 30)
    button.Position = UDim2.new(0, 10, 0, 10 + (count * 35))
    button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Text = text
    button.Font = Enum.Font.SourceSans
    button.TextSize = 18
    button.Parent = parent

    local state = default

    button.MouseButton1Click:Connect(function()
        state = not state
        button.Text = text .. " [" .. (state and "ON" or "OFF") .. "]"
        if callback then callback(state) end
    end)

    button.Text = text .. " [" .. (state and "ON" or "OFF") .. "]"
end

-- Add unload button to frame
function MyUILib:AddUnloadButton(parent)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 100, 0, 30)
    button.Position = UDim2.new(1, -110, 0, 0)
    button.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Text = "Unload UI"
    button.Font = Enum.Font.SourceSansBold
    button.TextSize = 16
    button.Parent = parent

    button.MouseButton1Click:Connect(function()
        MyUILib:Unload()
    end)
end

-- Unload GUI
function MyUILib:Unload()
    if screenGui then
        screenGui:Destroy()
    end
end

return MyUILib
